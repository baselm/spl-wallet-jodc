[{"/Users/453543/spl-wallet-jodc/src/index.js":"1","/Users/453543/spl-wallet-jodc/src/App.js":"2","/Users/453543/spl-wallet-jodc/src/serviceWorker.js":"3","/Users/453543/spl-wallet-jodc/src/components/NavigationFrame.js":"4","/Users/453543/spl-wallet-jodc/src/components/DialogForm.js":"5","/Users/453543/spl-wallet-jodc/src/components/LoadingIndicator.js":"6","/Users/453543/spl-wallet-jodc/src/utils/page.js":"7","/Users/453543/spl-wallet-jodc/src/utils/connected-wallets.js":"8","/Users/453543/spl-wallet-jodc/src/pages/WalletPage.js":"9","/Users/453543/spl-wallet-jodc/src/pages/PopupPage.js":"10","/Users/453543/spl-wallet-jodc/src/pages/LoginPage.js":"11","/Users/453543/spl-wallet-jodc/src/utils/tokens/names.js":"12","/Users/453543/spl-wallet-jodc/src/pages/ConnectionsPage.js":"13","/Users/453543/spl-wallet-jodc/src/utils/utils.ts":"14","/Users/453543/spl-wallet-jodc/src/utils/connection.tsx":"15","/Users/453543/spl-wallet-jodc/src/components/ExportAccountDialog.js":"16","/Users/453543/spl-wallet-jodc/src/components/BalancesList.js":"17","/Users/453543/spl-wallet-jodc/src/utils/walletProvider/localStorage.js":"18","/Users/453543/spl-wallet-jodc/src/components/AddAccountDialog.js":"19","/Users/453543/spl-wallet-jodc/src/utils/clusters.js":"20","/Users/453543/spl-wallet-jodc/src/components/ConnectionIcon.js":"21","/Users/453543/spl-wallet-jodc/src/components/AddHarwareWalletDialog.js":"22","/Users/453543/spl-wallet-jodc/src/components/DeleteMnemonicDialog.js":"23","/Users/453543/spl-wallet-jodc/src/components/SolanaIcon.js":"24","/Users/453543/spl-wallet-jodc/src/components/AddCustomClusterDialog.js":"25","/Users/453543/spl-wallet-jodc/src/utils/tokens/instructions.js":"26","/Users/453543/spl-wallet-jodc/src/utils/tokens/data.js":"27","/Users/453543/spl-wallet-jodc/src/utils/wallet-seed.js":"28","/Users/453543/spl-wallet-jodc/src/components/DebugButtons.js":"29","/Users/453543/spl-wallet-jodc/src/components/ConnectionsList.js":"30","/Users/453543/spl-wallet-jodc/src/utils/notifications.js":"31","/Users/453543/spl-wallet-jodc/src/utils/walletProvider/factory.js":"32","/Users/453543/spl-wallet-jodc/src/utils/fetch-loop.ts":"33","/Users/453543/spl-wallet-jodc/src/components/SignTransactionFormContent.js":"34","/Users/453543/spl-wallet-jodc/src/components/SignFormContent.js":"35","/Users/453543/spl-wallet-jodc/src/components/SwapButton.js":"36","/Users/453543/spl-wallet-jodc/src/components/MergeAccountsDialog.js":"37","/Users/453543/spl-wallet-jodc/src/utils/walletProvider/ledger.js":"38","/Users/453543/spl-wallet-jodc/src/components/DomainsList.tsx":"39","/Users/453543/spl-wallet-jodc/src/utils/tokens/index.js":"40","/Users/453543/spl-wallet-jodc/src/components/instructions/UnknownInstruction.js":"41","/Users/453543/spl-wallet-jodc/src/components/instructions/DexInstruction.js":"42","/Users/453543/spl-wallet-jodc/src/components/instructions/TokenInstruction.js":"43","/Users/453543/spl-wallet-jodc/src/components/instructions/NewOrder.js":"44","/Users/453543/spl-wallet-jodc/src/components/instructions/SystemInstruction.js":"45","/Users/453543/spl-wallet-jodc/src/components/instructions/StakeInstruction.js":"46","/Users/453543/spl-wallet-jodc/src/utils/transactions.ts":"47","/Users/453543/spl-wallet-jodc/src/utils/walletProvider/ledger-core.js":"48","/Users/453543/spl-wallet-jodc/src/components/instructions/LabelValue.js":"49","/Users/453543/spl-wallet-jodc/src/utils/name-service/index.ts":"50","/Users/453543/spl-wallet-jodc/src/components/EditAccountNameDialog.js":"51","/Users/453543/spl-wallet-jodc/src/components/TokenIcon.js":"52","/Users/453543/spl-wallet-jodc/src/utils/config.js":"53","/Users/453543/spl-wallet-jodc/src/components/CloseTokenAccountButton.js":"54","/Users/453543/spl-wallet-jodc/src/utils/swap/api.js":"55","/Users/453543/spl-wallet-jodc/src/utils/markets.ts":"56","/Users/453543/spl-wallet-jodc/src/components/SendDialog.js":"57","/Users/453543/spl-wallet-jodc/src/components/DepositDialog.js":"58","/Users/453543/spl-wallet-jodc/src/utils/region.ts":"59","/Users/453543/spl-wallet-jodc/src/components/AddTokenDialog.js":"60","/Users/453543/spl-wallet-jodc/src/components/TokenInfoDialog.js":"61","/Users/453543/spl-wallet-jodc/src/components/FtxPay/FtxPayDialog.js":"62","/Users/453543/spl-wallet-jodc/src/utils/swap/eth.js":"63","/Users/453543/spl-wallet-jodc/src/components/CopyableDisplay.js":"64","/Users/453543/spl-wallet-jodc/src/components/EthFeeEstimate.tsx":"65","/Users/453543/spl-wallet-jodc/src/components/IslamicIcon.js":"66","/Users/453543/spl-wallet-jodc/src/pages/Dashboard.js":"67","/Users/453543/spl-wallet-jodc/src/pages/Invest.js":"68","/Users/453543/spl-wallet-jodc/src/utils/wallet.js":"69","/Users/453543/spl-wallet-jodc/src/pages/Borrow.js":"70","/Users/453543/spl-wallet-jodc/src/pages/Deposits.js":"71","/Users/453543/spl-wallet-jodc/src/pages/Orders.js":"72","/Users/453543/spl-wallet-jodc/src/pages/Chart.js":"73","/Users/453543/spl-wallet-jodc/src/pages/Title.js":"74","/Users/453543/spl-wallet-jodc/src/pages/listItems.js":"75"},{"size":504,"mtime":1632675980892,"results":"76","hashOfConfig":"77"},{"size":8146,"mtime":1633896160632,"results":"78","hashOfConfig":"77"},{"size":5103,"mtime":1632675980894,"results":"79","hashOfConfig":"77"},{"size":17292,"mtime":1633896540881,"results":"80","hashOfConfig":"77"},{"size":720,"mtime":1632675980885,"results":"81","hashOfConfig":"77"},{"size":913,"mtime":1633871562171,"results":"82","hashOfConfig":"77"},{"size":567,"mtime":1633871851324,"results":"83","hashOfConfig":"77"},{"size":975,"mtime":1632675980895,"results":"84","hashOfConfig":"77"},{"size":1560,"mtime":1633896670335,"results":"85","hashOfConfig":"77"},{"size":14806,"mtime":1633873763795,"results":"86","hashOfConfig":"77"},{"size":16455,"mtime":1632675980893,"results":"87","hashOfConfig":"77"},{"size":14427,"mtime":1632675980899,"results":"88","hashOfConfig":"77"},{"size":866,"mtime":1632677539952,"results":"89","hashOfConfig":"77"},{"size":3255,"mtime":1632675980900,"results":"90","hashOfConfig":"77"},{"size":4029,"mtime":1633871740471,"results":"91","hashOfConfig":"77"},{"size":2369,"mtime":1633873763787,"results":"92","hashOfConfig":"77"},{"size":25430,"mtime":1633885994301,"results":"93","hashOfConfig":"77"},{"size":2135,"mtime":1632675980902,"results":"94","hashOfConfig":"77"},{"size":2588,"mtime":1632675980881,"results":"95","hashOfConfig":"77"},{"size":1490,"mtime":1632675980894,"results":"96","hashOfConfig":"77"},{"size":825,"mtime":1632675980884,"results":"97","hashOfConfig":"77"},{"size":5944,"mtime":1632675980882,"results":"98","hashOfConfig":"77"},{"size":2212,"mtime":1632675980885,"results":"99","hashOfConfig":"77"},{"size":929,"mtime":1632675980890,"results":"100","hashOfConfig":"77"},{"size":1647,"mtime":1632675980882,"results":"101","hashOfConfig":"77"},{"size":5217,"mtime":1632675980899,"results":"102","hashOfConfig":"77"},{"size":967,"mtime":1632675980899,"results":"103","hashOfConfig":"77"},{"size":6821,"mtime":1632675980900,"results":"104","hashOfConfig":"77"},{"size":3067,"mtime":1633873763795,"results":"105","hashOfConfig":"77"},{"size":4444,"mtime":1633873763795,"results":"106","hashOfConfig":"77"},{"size":2655,"mtime":1632675980897,"results":"107","hashOfConfig":"77"},{"size":355,"mtime":1632675980901,"results":"108","hashOfConfig":"77"},{"size":5715,"mtime":1632675980895,"results":"109","hashOfConfig":"77"},{"size":10379,"mtime":1633873763794,"results":"110","hashOfConfig":"77"},{"size":2668,"mtime":1633873763794,"results":"111","hashOfConfig":"77"},{"size":4474,"mtime":1633873763788,"results":"112","hashOfConfig":"77"},{"size":10253,"mtime":1633873763787,"results":"113","hashOfConfig":"77"},{"size":1907,"mtime":1632675980902,"results":"114","hashOfConfig":"77"},{"size":8334,"mtime":1633873763787,"results":"115","hashOfConfig":"77"},{"size":10132,"mtime":1632675980899,"results":"116","hashOfConfig":"77"},{"size":1342,"mtime":1632675980892,"results":"117","hashOfConfig":"77"},{"size":2261,"mtime":1633873763795,"results":"118","hashOfConfig":"77"},{"size":2494,"mtime":1633873763790,"results":"119","hashOfConfig":"77"},{"size":1983,"mtime":1633873763795,"results":"120","hashOfConfig":"77"},{"size":1657,"mtime":1632675980891,"results":"121","hashOfConfig":"77"},{"size":2308,"mtime":1632675980891,"results":"122","hashOfConfig":"77"},{"size":13748,"mtime":1633873763794,"results":"123","hashOfConfig":"77"},{"size":4603,"mtime":1632675980902,"results":"124","hashOfConfig":"77"},{"size":501,"mtime":1632675980891,"results":"125","hashOfConfig":"77"},{"size":3413,"mtime":1633873763794,"results":"126","hashOfConfig":"77"},{"size":1316,"mtime":1632675980886,"results":"127","hashOfConfig":"77"},{"size":653,"mtime":1632675980890,"results":"128","hashOfConfig":"77"},{"size":125,"mtime":1632675980895,"results":"129","hashOfConfig":"77"},{"size":1727,"mtime":1633873763787,"results":"130","hashOfConfig":"77"},{"size":1257,"mtime":1632675980897,"results":"131","hashOfConfig":"77"},{"size":2219,"mtime":1632675980896,"results":"132","hashOfConfig":"77"},{"size":23006,"mtime":1633873763787,"results":"133","hashOfConfig":"77"},{"size":11000,"mtime":1632675980885,"results":"134","hashOfConfig":"77"},{"size":259,"mtime":1632675980897,"results":"135","hashOfConfig":"77"},{"size":9082,"mtime":1633873763787,"results":"136","hashOfConfig":"77"},{"size":2240,"mtime":1632675980890,"results":"137","hashOfConfig":"77"},{"size":4754,"mtime":1633873763812,"results":"138","hashOfConfig":"77"},{"size":6767,"mtime":1632675980898,"results":"139","hashOfConfig":"77"},{"size":2402,"mtime":1632675980884,"results":"140","hashOfConfig":"77"},{"size":2090,"mtime":1632675980886,"results":"141","hashOfConfig":"77"},{"size":1766,"mtime":1633769372154,"results":"142","hashOfConfig":"77"},{"size":6236,"mtime":1633894838723,"results":"143","hashOfConfig":"77"},{"size":125,"mtime":1633785031544,"results":"144","hashOfConfig":"77"},{"size":13684,"mtime":1633886632824,"results":"145","hashOfConfig":"77"},{"size":1306,"mtime":1633885014751,"results":"146","hashOfConfig":"77"},{"size":666,"mtime":1633893579910,"results":"147","hashOfConfig":"77"},{"size":2223,"mtime":1633893618408,"results":"148","hashOfConfig":"77"},{"size":1758,"mtime":1633893701026,"results":"149","hashOfConfig":"77"},{"size":351,"mtime":1633893765017,"results":"150","hashOfConfig":"77"},{"size":1959,"mtime":1633895086788,"results":"151","hashOfConfig":"77"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},"1ydwxjp",{"filePath":"155","messages":"156","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"154"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"154"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"154"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"154"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"154"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},"/Users/453543/spl-wallet-jodc/src/index.js",[],["309","310"],"/Users/453543/spl-wallet-jodc/src/App.js",["311","312","313","314","315","316"],"import React, { Suspense, useState } from 'react';\nimport { makeStyles, List, ListItem } from '@material-ui/core';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport {\n  ThemeProvider,\n  unstable_createMuiStrictModeTheme as createMuiTheme,\n} from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport DialogForm from './components/DialogForm';\nimport NavigationFrame from './components/NavigationFrame';\nimport { ConnectionProvider } from './utils/connection';\nimport WalletPage from './pages/WalletPage';\nimport { useWallet, WalletProvider } from './utils/wallet';\nimport { ConnectedWalletsProvider } from './utils/connected-wallets';\nimport { TokenRegistryProvider } from './utils/tokens/names';\nimport LoadingIndicator from './components/LoadingIndicator';\nimport { SnackbarProvider } from 'notistack';\nimport PopupPage from './pages/PopupPage';\nimport LoginPage from './pages/LoginPage';\nimport ConnectionsPage from './pages/ConnectionsPage';\nimport { isExtension } from './utils/utils';\nimport { PageProvider, usePage } from './utils/page';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Dashboard from './pages/Dashboard'\nimport Invest from './pages/Invest'\nimport Borrow from './pages/Borrow'\n\n\nexport default function App() {\n  // TODO: add toggle for dark mode\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light',\n          primary: {\n            main: '#003E00',\n          },\n          secondary: { main: '#FFFFFF' },\n        },\n        // TODO consolidate popup dimensions\n        ext: '450',\n      }),\n    [prefersDarkMode],\n  );\n\n \n  let appElement = (\n    <NavigationFrame>\n      <Suspense fallback={<LoadingIndicator />}>\n        <PageContents />\n      </Suspense>\n    </NavigationFrame>\n  );\n\n  if (isExtension) {\n    appElement = (\n      <ConnectedWalletsProvider>\n        <PageProvider>{appElement}</PageProvider>\n      </ConnectedWalletsProvider>\n    );\n  }\n\n  return (\n    <Suspense fallback={<LoadingIndicator />}>\n       <ThemeProvider theme={theme}>\n        \n    \n           \n        <CssBaseline />\n         <ConnectionProvider>\n         <TokenRegistryProvider>\n             <SnackbarProvider maxSnack={5} autoHideDuration={8000}>\n             <WalletProvider>\n             <Router>\n             <NavigationFrame>\n              \n                     <Switch>\n                         <Route exact path=\"/\">\n                         <Suspense fallback={<LoadingIndicator />}>\n                             <PageContents />\n                         </Suspense>\n                         </Route>\n\n                         <Route path=\"/Dashboard\">\n                             <Dashboard />\n                             </Route>\n                             <Route path=\"/Invest\">\n                             <Invest />\n                             </Route>\n                             <Route path=\"/Borrow\">\n                             <Borrow />\n                             </Route>\n                     </Switch>\n                </NavigationFrame>\n              </Router>\n              \n\n             </WalletProvider>\n             </SnackbarProvider>\n         </TokenRegistryProvider>\n         </ConnectionProvider>\n      \n  \n</ThemeProvider>\n    </Suspense>\n  );\n}\n\nfunction PageContents() {\n  const wallet = useWallet();\n  const [page] = usePage();\n  const [showWalletSuggestion, setShowWalletSuggestion] = useState(true);\n  const suggestionKey = 'private-irgnore-wallet-suggestion';\n  const ignoreSuggestion = window.localStorage.getItem(suggestionKey);\n  \n  console.log('Baz working start');\n  if (!wallet) {\n    return (\n      <>\n        {!ignoreSuggestion && (\n          <WalletSuggestionDialog\n            open={showWalletSuggestion}\n            onClose={() => setShowWalletSuggestion(false)}\n            onIgnore={() => {\n              window.localStorage.setItem(suggestionKey, true);\n              setShowWalletSuggestion(false);\n            }}\n          />\n        )}\n        <LoginPage />\n      </>\n    );\n  }\n  if (window.opener) {\n    return <PopupPage opener={window.opener} />;\n  }\n  if (page === 'wallet') {\n    return <WalletPage />;\n  } else if (page === 'connections') {\n    return <ConnectionsPage />;\n  }\n}\n\nconst useStyles = makeStyles(() => ({\n  walletButton: {\n    width: '100%',\n    padding: '16px',\n    '&:hover': {\n      cursor: 'pointer',\n    },\n  },\n}));\n\nfunction WalletSuggestionDialog({ open, onClose, onIgnore }) {\n  const classes = useStyles();\n  return (\n    <DialogForm open={open} onClose={onClose} fullWidth>\n      <DialogTitle>Looking for a Wallet?</DialogTitle>\n      <DialogContent>\n        <Typography>\n          Sollet is an{' '}\n          <a\n            style={{ color: 'inherit' }}\n            href=\"https://github.com/project-serum/spl-token-wallet\"\n            target=\"__blank\"\n          >\n            {' '}\n            open source\n          </a>{' '}\n          wallet for advanced users and developers. For the best Solana\n          experience and user support, it is recommended to use <b>\n            Phantom\n          </b>{' '}\n          or <b>Solflare</b>.\n        </Typography>\n        <List disablePadding style={{ marginTop: '16px' }}>\n          <ListItem button disablePadding style={{ padding: 0 }}>\n            <div\n              className={classes.walletButton}\n              style={{ display: 'flex' }}\n              onClick={() => {\n                window.location = 'https://phantom.app/';\n              }}\n            >\n              <div>\n                // eslint-disable-next-line\n                <img\n                  style={{ height: '39px' }}\n                  src=\"https://raw.githubusercontent.com/solana-labs/wallet-adapter/master/packages/wallets/icons/phantom.svg\"\n                />\n              </div>\n              <div>\n                <Typography\n                  style={{\n                    marginLeft: '16px',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    flexDirection: 'column',\n                    height: '39px',\n                    fontWeight: 'bold',\n                  }}\n                >\n                  Phantom\n                </Typography>\n              </div>\n            </div>\n          </ListItem>\n          <ListItem button disablePadding style={{ padding: 0 }}>\n            <div\n              onClick={() => {\n                window.location = 'https://solflare.com/';\n              }}\n              className={classes.walletButton}\n              style={{ display: 'flex' }}\n            >\n              <div>\n                <img\n                  style={{ height: '39px' }}\n                  src=\"https://raw.githubusercontent.com/solana-labs/wallet-adapter/master/packages/wallets/icons/solflare.svg\"\n                />\n              </div>\n              // eslint-disable-next-line\n              <div>\n                <Typography\n                  style={{\n                    marginLeft: '16px',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    flexDirection: 'column',\n                    height: '39px',\n                    fontWeight: 'bold',\n                  }}\n                >\n                  Solflare\n                </Typography>\n              </div>\n            </div>\n          </ListItem>\n        </List>\n      </DialogContent>\n      <DialogActions>\n        <Button type=\"submit\" color=\"primary\" onClick={onIgnore}>\n          Ignore Future Dialog\n        </Button>\n        <Button type=\"submit\" color=\"primary\" onClick={onClose}>\n          Ok\n        </Button>\n      </DialogActions>\n    </DialogForm>\n  );\n}\n","/Users/453543/spl-wallet-jodc/src/serviceWorker.js",[],"/Users/453543/spl-wallet-jodc/src/components/NavigationFrame.js",["317","318","319","320","321","322","323","324","325","326","327","328"],"/Users/453543/spl-wallet-jodc/src/components/DialogForm.js",[],"/Users/453543/spl-wallet-jodc/src/components/LoadingIndicator.js",[],"/Users/453543/spl-wallet-jodc/src/utils/page.js",["329"],"import { createContext, useContext, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom'\n \nconst PageContext = createContext(['wallet', () => {}]);\n\nexport const PageProvider = ({ children }) => {\n  const [page, setPage] = useState('wallet');\n  const [history, setHistory] = useHistory()\n  console.log({history})\n  console.log(\"geting history\")\n  return (\n    <PageContext.Provider value={[page, setPage, history, setHistory]}>\n      {children}\n    </PageContext.Provider>\n  );\n};\n\nexport const usePage = () => useContext(PageContext);\n","/Users/453543/spl-wallet-jodc/src/utils/connected-wallets.js",[],"/Users/453543/spl-wallet-jodc/src/pages/WalletPage.js",["330","331","332","333","334","335"],"/Users/453543/spl-wallet-jodc/src/pages/PopupPage.js",[],"/Users/453543/spl-wallet-jodc/src/pages/LoginPage.js",[],"/Users/453543/spl-wallet-jodc/src/utils/tokens/names.js",[],"/Users/453543/spl-wallet-jodc/src/pages/ConnectionsPage.js",[],"/Users/453543/spl-wallet-jodc/src/utils/utils.ts",[],["336","337"],"/Users/453543/spl-wallet-jodc/src/utils/connection.tsx",[],"/Users/453543/spl-wallet-jodc/src/components/ExportAccountDialog.js",[],"/Users/453543/spl-wallet-jodc/src/components/BalancesList.js",["338","339","340"],"import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Paper from '@material-ui/core/Paper';\nimport {\n  refreshWalletPublicKeys,\n  useBalanceInfo,\n  useWallet,\n  useWalletPublicKeys,\n  useWalletSelector,\n} from '../utils/wallet';\nimport { findAssociatedTokenAddress } from '../utils/tokens';\nimport LoadingIndicator from './LoadingIndicator';\nimport Collapse from '@material-ui/core/Collapse';\nimport { Typography } from '@material-ui/core';\nimport TokenInfoDialog from './TokenInfoDialog';\nimport FtxPayDialog from './FtxPay/FtxPayDialog';\nimport Link from '@material-ui/core/Link';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { abbreviateAddress, useIsExtensionWidth } from '../utils/utils';\nimport Button from '@material-ui/core/Button';\nimport SendIcon from '@material-ui/icons/Send';\nimport ReceiveIcon from '@material-ui/icons/WorkOutline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AddIcon from '@material-ui/icons/Add';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/InfoOutlined';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport EditIcon from '@material-ui/icons/Edit';\nimport MergeType from '@material-ui/icons/MergeType';\nimport SortIcon from '@material-ui/icons/Sort';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddTokenDialog from './AddTokenDialog';\nimport ExportAccountDialog from './ExportAccountDialog';\nimport ftxPayIcon from './FtxPay/icon.png';\nimport SendDialog from './SendDialog';\nimport DepositDialog from './DepositDialog';\nimport {\n  useIsProdNetwork,\n  refreshAccountInfo,\n  useSolanaExplorerUrlSuffix,\n} from '../utils/connection';\nimport { useRegion } from '../utils/region';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { serumMarkets, priceStore } from '../utils/markets';\nimport { swapApiRequest } from '../utils/swap/api';\nimport { showSwapAddress } from '../utils/config';\nimport { useAsyncData } from '../utils/fetch-loop';\nimport { showTokenInfoDialog } from '../utils/config';\nimport { useConnection } from '../utils/connection';\nimport { shortenAddress } from '../utils/utils';\nimport CloseTokenAccountDialog from './CloseTokenAccountButton';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport TokenIcon from './TokenIcon';\nimport EditAccountNameDialog from './EditAccountNameDialog';\nimport MergeAccountsDialog from './MergeAccountsDialog';\nimport SwapButton from './SwapButton';\nimport DnsIcon from '@material-ui/icons/Dns';\nimport DomainsList from './DomainsList';\n\nconst balanceFormat = new Intl.NumberFormat(undefined, {\n  minimumFractionDigits: 4,\n  maximumFractionDigits: 4,\n  useGrouping: true,\n});\n\nconst SortAccounts = {\n  None: 0,\n  Ascending: 1,\n  Descending: 2,\n};\n\n// Aggregated $USD values of all child BalanceListItems child components.\n//\n// Values:\n// * undefined => loading.\n// * null => no market exists.\n// * float => done.\n//\n// For a given set of publicKeys, we know all the USD values have been loaded when\n// all of their values in this object are not `undefined`.\nconst usdValues = {};\n\n// Calculating associated token addresses is an asynchronous operation, so we cache\n// the values so that we can quickly render components using them. This prevents\n// flickering for the associated token fingerprint icon.\nconst associatedTokensCache = {};\n\nconst numberFormat = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n});\n\nfunction fairsIsLoaded(publicKeys) {\n  return (\n    publicKeys.filter((pk) => usdValues[pk.toString()] !== undefined).length ===\n    publicKeys.length\n  );\n}\n\nexport default function BalancesList() {\n  const wallet = useWallet();\n  const [publicKeys, loaded] = useWalletPublicKeys();\n  const [showAddTokenDialog, setShowAddTokenDialog] = useState(false);\n  const [showEditAccountNameDialog, setShowEditAccountNameDialog] = useState(\n    false,\n  );\n  const [showMergeAccounts, setShowMergeAccounts] = useState(false);\n  const [showFtxPayDialog, setShowFtxPayDialog] = useState(false);\n  const [sortAccounts, setSortAccounts] = useState(SortAccounts.None);\n  const [showDomains, setShowDomains] = useState(false);\n  const { accounts, setAccountName } = useWalletSelector();\n  const [isCopied, setIsCopied] = useState(false);\n  const isExtensionWidth = useIsExtensionWidth();\n  // Dummy var to force rerenders on demand.\n  const [, setForceUpdate] = useState(false);\n  const region = useRegion();\n  const selectedAccount = accounts.find((a) => a.isSelected);\n  const allTokensLoaded = loaded && fairsIsLoaded(publicKeys);\n  let sortedPublicKeys = publicKeys;\n  if (allTokensLoaded && sortAccounts !== SortAccounts.None) {\n    sortedPublicKeys = [...publicKeys];\n    sortedPublicKeys.sort((a, b) => {\n      const aVal = usdValues[a.toString()];\n      const bVal = usdValues[b.toString()];\n\n      a = aVal === undefined || aVal === null ? -1 : aVal;\n      b = bVal === undefined || bVal === null ? -1 : bVal;\n      if (sortAccounts === SortAccounts.Descending) {\n        if (a < b) {\n          return -1;\n        } else if (a > b) {\n          return 1;\n        } else {\n          return 0;\n        }\n      } else {\n        if (b < a) {\n          return -1;\n        } else if (b > a) {\n          return 1;\n        } else {\n          return 0;\n        }\n      }\n    });\n  }\n  const totalUsdValue = publicKeys\n    .filter((pk) => usdValues[pk.toString()])\n    .map((pk) => usdValues[pk.toString()])\n    .reduce((a, b) => a + b, 0.0);\n\n  // Memoized callback and component for the `BalanceListItems`.\n  //\n  // The `BalancesList` fetches data, e.g., fairs for tokens using React hooks\n  // in each of the child `BalanceListItem` components. However, we want the\n  // parent component, to aggregate all of this data together, for example,\n  // to show the cumulative USD amount in the wallet.\n  //\n  // To achieve this, we need to pass a callback from the parent to the chlid,\n  // so that the parent can collect the results of all the async network requests.\n  // However, this can cause a render loop, since invoking the callback can cause\n  // the parent to rerender, which causese the child to rerender, which causes\n  // the callback to be invoked.\n  //\n  // To solve this, we memoize all the `BalanceListItem` children components.\n  const setUsdValuesCallback = useCallback(\n    (publicKey, usdValue) => {\n      if (usdValues[publicKey.toString()] !== usdValue) {\n        usdValues[publicKey.toString()] = usdValue;\n        if (fairsIsLoaded(publicKeys)) {\n          setForceUpdate((forceUpdate) => !forceUpdate);\n        }\n      }\n    },\n    [publicKeys],\n  );\n  const balanceListItemsMemo = useMemo(() => {\n    return sortedPublicKeys.map((pk) => {\n      return React.memo((props) => {\n        return (\n          <BalanceListItem\n            key={pk.toString()}\n            publicKey={pk}\n            setUsdValue={setUsdValuesCallback}\n          />\n        );\n      });\n    });\n  }, [sortedPublicKeys, setUsdValuesCallback]);\n\n  const iconSize = isExtensionWidth ? 'small' : 'medium';\n\n  return (\n    <Paper>\n      <AppBar position=\"static\" color=\"default\" elevation={1}>\n        <Toolbar>\n          <CopyToClipboard\n            text={selectedAccount && selectedAccount.address.toBase58()}\n            onCopy={() => {\n              setIsCopied(true);\n              setTimeout(() => {\n                setIsCopied(false);\n              }, 1000);\n            }}\n          >\n            <Tooltip\n              title={\n                <Typography>\n                  {isCopied ? 'Copied' : 'Copy to clipboard'}\n                </Typography>\n              }\n              style={{ fontSize: '10rem' }}\n            >\n              <Typography\n                variant=\"h6\"\n                style={{\n                  flexGrow: 1,\n                  fontSize: isExtensionWidth && '1rem',\n                  cursor: 'pointer',\n                }}\n                hover={true}\n                component=\"h2\"\n              >\n                {selectedAccount && selectedAccount.name}\n                {isExtensionWidth\n                  ? ''\n                  : ` (${\n                      selectedAccount &&\n                      shortenAddress(selectedAccount.address.toBase58())\n                    })`}{' '}\n                {allTokensLoaded && (\n                  <>({numberFormat.format(totalUsdValue.toFixed(2))})</>\n                )}\n              </Typography>\n            </Tooltip>\n          </CopyToClipboard>\n          {selectedAccount &&\n            selectedAccount.name !== 'Main account' &&\n            selectedAccount.name !== 'Hardware wallet' && (\n              <Tooltip title=\"Edit Account Name\" arrow>\n                <IconButton\n                  size={iconSize}\n                  onClick={() => setShowEditAccountNameDialog(true)}\n                >\n                  <EditIcon />\n                </IconButton>\n              </Tooltip>\n            )}\n          <Tooltip title=\"Deposit via FTX Pay\" arrow>\n            <IconButton\n              size={iconSize}\n              onClick={() => setShowFtxPayDialog(true)}\n            >\n              <img\n                title={'FTX Pay'}\n                alt={'FTX Pay'}\n                style={{\n                  width: 20,\n                  height: 20,\n                }}\n                src={ftxPayIcon}\n              />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"See your domains\" arrow>\n            <IconButton size={iconSize} onClick={() => setShowDomains(true)}>\n              <DnsIcon />\n            </IconButton>\n          </Tooltip>\n          <DomainsList open={showDomains} setOpen={setShowDomains} />\n          {region.result && !region.result.isRestricted && <SwapButton size={iconSize} />}\n          <Tooltip title=\"Migrate Tokens\" arrow>\n            <IconButton\n              size={iconSize}\n              onClick={() => setShowMergeAccounts(true)}\n            >\n              <MergeType />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Add Token\" arrow>\n            <IconButton\n              size={iconSize}\n              onClick={() => setShowAddTokenDialog(true)}\n            >\n              <AddIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Sort Tokens\" arrow>\n            <IconButton\n              size={iconSize}\n              onClick={() => {\n                switch (sortAccounts) {\n                  case SortAccounts.None:\n                    setSortAccounts(SortAccounts.Ascending);\n                    return;\n                  case SortAccounts.Ascending:\n                    setSortAccounts(SortAccounts.Descending);\n                    return;\n                  case SortAccounts.Descending:\n                    setSortAccounts(SortAccounts.None);\n                    return;\n                  default:\n                    console.error('invalid sort type', sortAccounts);\n                }\n              }}\n            >\n              <SortIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Refresh\" arrow>\n            <IconButton\n              size={iconSize}\n              onClick={() => {\n                refreshWalletPublicKeys(wallet);\n                publicKeys.map((publicKey) =>\n                  refreshAccountInfo(wallet.connection, publicKey, true),\n                );\n              }}\n              style={{ marginRight: -12 }}\n            >\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n        </Toolbar>\n      </AppBar>\n      <List disablePadding>\n        {balanceListItemsMemo.map((Memoized) => (\n          <Memoized />\n        ))}\n        {loaded ? null : <LoadingIndicator />}\n      </List>\n      <AddTokenDialog\n        open={showAddTokenDialog}\n        onClose={() => setShowAddTokenDialog(false)}\n      />\n      <FtxPayDialog\n        open={showFtxPayDialog}\n        publicKeys={publicKeys}\n        onClose={() => setShowFtxPayDialog(false)}\n      />\n      <EditAccountNameDialog\n        open={showEditAccountNameDialog}\n        onClose={() => setShowEditAccountNameDialog(false)}\n        oldName={selectedAccount ? selectedAccount.name : ''}\n        onEdit={(name) => {\n          setAccountName(selectedAccount.selector, name);\n          setShowEditAccountNameDialog(false);\n        }}\n      />\n      <MergeAccountsDialog\n        open={showMergeAccounts}\n        onClose={() => setShowMergeAccounts(false)}\n      />\n    </Paper>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  address: {\n    textOverflow: 'ellipsis',\n    overflowX: 'hidden',\n  },\n  itemDetails: {\n    marginLeft: theme.spacing(3),\n    marginRight: theme.spacing(3),\n    marginBottom: theme.spacing(2),\n  },\n  buttonContainer: {\n    display: 'flex',\n    justifyContent: 'space-evenly',\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  viewDetails: {\n    '&:hover': {\n      cursor: 'pointer',\n    },\n  },\n}));\n\nexport function BalanceListItem({ publicKey, expandable, setUsdValue }) {\n  const wallet = useWallet();\n  const balanceInfo = useBalanceInfo(publicKey);\n  const classes = useStyles();\n  const connection = useConnection();\n  const [open, setOpen] = useState(true);\n  const isExtensionWidth = useIsExtensionWidth();\n  const [, setForceUpdate] = useState(false);\n  // Valid states:\n  //   * undefined => loading.\n  //   * null => not found.\n  //   * else => price is loaded.\n  const [price, setPrice] = useState(undefined);\n  useEffect(() => {\n    if (balanceInfo) {\n      if (balanceInfo.tokenSymbol) {\n        const coin = balanceInfo.tokenSymbol.toUpperCase();\n        // Don't fetch USD stable coins. Mark to 1 USD.\n        if (coin === 'USDT' || coin === 'USDC' || coin === 'SOL') {\n          setPrice(100);\n        }\n        // A Serum market exists. Fetch the price.\n        else if (serumMarkets[coin]) {\n          let m = serumMarkets[coin];\n          priceStore\n            .getPrice(connection, m.name)\n            .then((price) => {\n              setPrice(price);\n            })\n            .catch((err) => {\n              console.error(err);\n              setPrice(null);\n            });\n        }\n        // No Serum market exists.\n        else {\n          setPrice(null);\n        }\n      }\n      // No token symbol so don't fetch market data.\n      else {\n        setPrice(null);\n      }\n    }\n  }, [price, balanceInfo, connection]);\n\n  expandable = true;\n\n  if (!balanceInfo) {\n    return <LoadingIndicator delay={0} />;\n  }\n\n  let {\n    amount,\n    decimals,\n    mint,\n    tokenName,\n    tokenSymbol,\n    tokenLogoUri,\n  } = balanceInfo;\n  tokenName = tokenName ?? abbreviateAddress(mint);\n  let displayName;\n  if (isExtensionWidth) {\n    displayName = tokenSymbol ?? tokenName;\n  } else {\n    displayName = tokenName + (tokenSymbol ? ` (${tokenSymbol})` : '');\n  }\n\n  // Fetch and cache the associated token address.\n  if (wallet && wallet.publicKey && mint) {\n    if (\n      associatedTokensCache[wallet.publicKey.toString()] === undefined ||\n      associatedTokensCache[wallet.publicKey.toString()][mint.toString()] ===\n        undefined\n    ) {\n      findAssociatedTokenAddress(wallet.publicKey, mint).then((assocTok) => {\n        let walletAccounts = Object.assign(\n          {},\n          associatedTokensCache[wallet.publicKey.toString()],\n        );\n        walletAccounts[mint.toString()] = assocTok;\n        associatedTokensCache[wallet.publicKey.toString()] = walletAccounts;\n        if (assocTok.equals(publicKey)) {\n          // Force a rerender now that we've cached the value.\n          setForceUpdate((forceUpdate) => !forceUpdate);\n        }\n      });\n    }\n  }\n\n  // undefined => not loaded.\n  let isAssociatedToken = mint ? undefined : false;\n  if (\n    wallet &&\n    wallet.publicKey &&\n    mint &&\n    associatedTokensCache[wallet.publicKey.toString()]\n  ) {\n    let acc =\n      associatedTokensCache[wallet.publicKey.toString()][mint.toString()];\n    if (acc) {\n      if (acc.equals(publicKey)) {\n        isAssociatedToken = true;\n      } else {\n        isAssociatedToken = false;\n      }\n    }\n  }\n\n  const subtitle =\n    isExtensionWidth || !publicKey.equals(balanceInfo.owner) ? undefined : (\n      <div style={{ display: 'flex', height: '20px', overflow: 'hidden' }}>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            flexDirection: 'column',\n          }}\n        >\n          {publicKey.toBase58()}\n        </div>\n      </div>\n    );\n\n  const usdValue =\n    price === undefined // Not yet loaded.\n      ? undefined\n      : price === null // Loaded and empty.\n      ? null\n      : ((amount / Math.pow(10, decimals)) * price).toFixed(2); // Loaded.\n  if (setUsdValue && usdValue !== undefined) {\n    setUsdValue(publicKey, usdValue === null ? null : parseFloat(usdValue));\n  }\n\n  return (\n    <>\n      <ListItem>\n        <ListItemIcon>\n          <TokenIcon\n            mint={mint}\n            tokenName={tokenName}\n            url={tokenLogoUri}\n            size={28}\n          />\n        </ListItemIcon>\n        <div style={{ display: 'flex', flex: 1 }}>\n          <ListItemText\n            primary={\n              <>\n                {balanceFormat.format(amount / Math.pow(10, decimals))}{' '}\n                {displayName}\n              </>\n            }\n            secondary={subtitle}\n            secondaryTypographyProps={{ className: classes.address }}\n          />\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              flexDirection: 'column',\n            }}\n          >\n            {price && (\n              <Typography color=\"textSecondary\">\n                Price (USDT): {numberFormat.format(usdValue)}\n              </Typography>\n            )}\n          </div>\n        </div>\n       {expandable ? open ?  false : false: <></>}\n      </ListItem>\n      {expandable && (\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <BalanceListItemDetails\n            isAssociatedToken={isAssociatedToken}\n            publicKey={publicKey}\n            serumMarkets={serumMarkets}\n            balanceInfo={balanceInfo}\n          />\n        </Collapse>\n      )}\n    </>\n  );\n}\n\nfunction BalanceListItemDetails({\n  publicKey,\n  serumMarkets,\n  balanceInfo,\n  isAssociatedToken,\n}) {\n  const urlSuffix = useSolanaExplorerUrlSuffix();\n  const classes = useStyles();\n  const [sendDialogOpen, setSendDialogOpen] = useState(false);\n  const [depositDialogOpen, setDepositDialogOpen] = useState(false);\n  const [tokenInfoDialogOpen, setTokenInfoDialogOpen] = useState(false);\n  const [exportAccDialogOpen, setExportAccDialogOpen] = useState(false);\n  const [\n    closeTokenAccountDialogOpen,\n    setCloseTokenAccountDialogOpen,\n  ] = useState(false);\n  const [showDetails, setShowDetails] = useState(false);\n  const wallet = useWallet();\n  const isProdNetwork = useIsProdNetwork();\n  const [swapInfo] = useAsyncData(async () => {\n    if (!showSwapAddress || !isProdNetwork) {\n      return null;\n    }\n    return await swapApiRequest(\n      'POST',\n      'swap_to',\n      {\n        blockchain: 'sol',\n        coin: balanceInfo.mint?.toBase58(),\n        address: publicKey.toBase58(),\n      },\n      { ignoreUserErrors: true },\n    );\n  }, [\n    'swapInfo',\n    isProdNetwork,\n    balanceInfo.mint?.toBase58(),\n    publicKey.toBase58(),\n  ]);\n  const isExtensionWidth = useIsExtensionWidth();\n\n  if (!balanceInfo) {\n    return <LoadingIndicator delay={0} />;\n  }\n\n  let { mint, tokenName, tokenSymbol, owner, amount } = balanceInfo;\n\n  // Only show the export UI for the native SOL coin.\n  const exportNeedsDisplay =\n    mint === null && tokenName === 'SOL' && tokenSymbol === 'SOL';\n\n  const market = tokenSymbol\n    ? serumMarkets[tokenSymbol.toUpperCase()]\n      ? serumMarkets[tokenSymbol.toUpperCase()].publicKey\n      : undefined\n    : undefined;\n  const isSolAddress = publicKey.equals(owner);\n  const additionalInfo = isExtensionWidth ? undefined : (\n    <>\n      <Typography variant=\"h6\" gutterBottom> Baz </Typography>\n      <Typography variant=\"body2\">\n        Token Name: {tokenName ?? 'Unknown'}\n      </Typography>\n      <Typography variant=\"body2\">\n        Token Symbol: {tokenSymbol ?? 'Unknown'}\n      </Typography>\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        <div>\n          {!isSolAddress && isAssociatedToken === false && (\n            <div style={{ display: 'flex' }}>\n              This is an auxiliary token account.\n            </div>\n          )}\n          <Typography variant=\"body2\">\n            <Link\n              href={\n                `https://solscan.io/account/${publicKey.toBase58()}` + urlSuffix\n              }\n              target=\"_blank\"\n              rel=\"noopener\"\n            >\n              View on Solscan\n            </Link>\n          </Typography>\n          {market && (\n            <Typography variant=\"body2\">\n              <Link\n                href={`https://dex.projectserum.com/#/market/${market}`}\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                View on Serum\n              </Link>\n            </Typography>\n          )}\n          {swapInfo && swapInfo.coin.erc20Contract && (\n            <Typography variant=\"body2\">\n              <Link\n                href={\n                  `https://etherscan.io/token/${swapInfo.coin.erc20Contract}` +\n                  urlSuffix\n                }\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                View on Ethereum\n              </Link>\n            </Typography>\n          )}\n          {!isSolAddress && (\n            <Typography variant=\"body2\">\n              <Link\n                className={classes.viewDetails}\n                onClick={() => setShowDetails(!showDetails)}\n              >\n                View Details\n              </Link>\n            </Typography>\n          )}\n          {showDetails &&\n            (mint ? (\n              <Typography variant=\"body2\" className={classes.address}>\n                Mint Address: {mint.toBase58()}\n              </Typography>\n            ) : null)}\n          {!isSolAddress && showDetails && (\n            <Typography variant=\"body2\" className={classes.address}>\n              {isAssociatedToken ? 'Associated' : ''} Token Metadata:{' '}\n              {publicKey.toBase58()}\n            </Typography>\n          )}\n        </div>\n        {exportNeedsDisplay && wallet.allowsExport && (\n          <div>\n            <Typography variant=\"body2\">\n              <Link href={'#'} onClick={(e) => setExportAccDialogOpen(true)}>\n                Export\n              </Link>\n            </Typography>\n          </div>\n        )}\n      </div>\n    </>\n  );\n\n  return (\n    <>\n      {wallet.allowsExport && (\n        <ExportAccountDialog\n          onClose={() => setExportAccDialogOpen(false)}\n          open={exportAccDialogOpen}\n        />\n      )}\n      <div className={classes.itemDetails}>\n        <div className={classes.buttonContainer}>\n          {!publicKey.equals(owner) && showTokenInfoDialog ? (\n            <Button\n              variant=\"outlined\"\n              color=\"default\"\n              startIcon={<InfoIcon />}\n              onClick={() => setTokenInfoDialogOpen(true)}\n            >\n              Token Info\n            </Button>\n          ) : null}\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            startIcon={<ReceiveIcon />}\n            onClick={() => setDepositDialogOpen(true)}\n          >\n            deposit \n          </Button>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            startIcon={<SendIcon />}\n            onClick={() => setSendDialogOpen(true)}\n          >\n            withdraw\n          </Button>\n          {localStorage.getItem('warning-close-account') &&\n          mint &&\n          amount === 0 ? (\n            <Button\n              variant=\"outlined\"\n              color=\"secondary\"\n              size=\"small\"\n              startIcon={<DeleteIcon />}\n              onClick={() => setCloseTokenAccountDialogOpen(true)}\n            >\n              Delete\n            </Button>\n          ) : null}\n        </div>\n        {additionalInfo}\n      </div>\n      <SendDialog\n        open={sendDialogOpen}\n        onClose={() => setSendDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n      />\n      <DepositDialog\n        open={depositDialogOpen}\n        onClose={() => setDepositDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n        swapInfo={swapInfo}\n        isAssociatedToken={isAssociatedToken}\n      />\n      <TokenInfoDialog\n        open={tokenInfoDialogOpen}\n        onClose={() => setTokenInfoDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n      />\n      <CloseTokenAccountDialog\n        open={closeTokenAccountDialogOpen}\n        onClose={() => setCloseTokenAccountDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n      />\n    </>\n  );\n}\n","/Users/453543/spl-wallet-jodc/src/utils/walletProvider/localStorage.js",[],"/Users/453543/spl-wallet-jodc/src/components/AddAccountDialog.js",[],"/Users/453543/spl-wallet-jodc/src/utils/clusters.js",[],"/Users/453543/spl-wallet-jodc/src/components/ConnectionIcon.js",[],"/Users/453543/spl-wallet-jodc/src/components/AddHarwareWalletDialog.js",[],"/Users/453543/spl-wallet-jodc/src/components/DeleteMnemonicDialog.js",[],"/Users/453543/spl-wallet-jodc/src/components/SolanaIcon.js",[],"/Users/453543/spl-wallet-jodc/src/components/AddCustomClusterDialog.js",[],"/Users/453543/spl-wallet-jodc/src/utils/tokens/instructions.js",[],"/Users/453543/spl-wallet-jodc/src/utils/tokens/data.js",[],"/Users/453543/spl-wallet-jodc/src/utils/wallet-seed.js",[],"/Users/453543/spl-wallet-jodc/src/components/DebugButtons.js",[],"/Users/453543/spl-wallet-jodc/src/components/ConnectionsList.js",[],"/Users/453543/spl-wallet-jodc/src/utils/notifications.js",[],"/Users/453543/spl-wallet-jodc/src/utils/walletProvider/factory.js",[],"/Users/453543/spl-wallet-jodc/src/utils/fetch-loop.ts",[],"/Users/453543/spl-wallet-jodc/src/components/SignTransactionFormContent.js",[],"/Users/453543/spl-wallet-jodc/src/components/SignFormContent.js",[],"/Users/453543/spl-wallet-jodc/src/components/SwapButton.js",[],"/Users/453543/spl-wallet-jodc/src/components/MergeAccountsDialog.js",[],"/Users/453543/spl-wallet-jodc/src/utils/walletProvider/ledger.js",[],"/Users/453543/spl-wallet-jodc/src/components/DomainsList.tsx",[],"/Users/453543/spl-wallet-jodc/src/utils/tokens/index.js",[],"/Users/453543/spl-wallet-jodc/src/components/instructions/UnknownInstruction.js",[],"/Users/453543/spl-wallet-jodc/src/components/instructions/DexInstruction.js",[],"/Users/453543/spl-wallet-jodc/src/components/instructions/TokenInstruction.js",[],"/Users/453543/spl-wallet-jodc/src/components/instructions/NewOrder.js",[],"/Users/453543/spl-wallet-jodc/src/components/instructions/SystemInstruction.js",[],"/Users/453543/spl-wallet-jodc/src/components/instructions/StakeInstruction.js",[],"/Users/453543/spl-wallet-jodc/src/utils/transactions.ts",[],"/Users/453543/spl-wallet-jodc/src/utils/walletProvider/ledger-core.js",[],"/Users/453543/spl-wallet-jodc/src/components/instructions/LabelValue.js",[],"/Users/453543/spl-wallet-jodc/src/utils/name-service/index.ts",[],"/Users/453543/spl-wallet-jodc/src/components/EditAccountNameDialog.js",[],"/Users/453543/spl-wallet-jodc/src/components/TokenIcon.js",[],"/Users/453543/spl-wallet-jodc/src/utils/config.js",[],"/Users/453543/spl-wallet-jodc/src/components/CloseTokenAccountButton.js",[],"/Users/453543/spl-wallet-jodc/src/utils/swap/api.js",[],"/Users/453543/spl-wallet-jodc/src/utils/markets.ts",[],"/Users/453543/spl-wallet-jodc/src/components/SendDialog.js",[],"/Users/453543/spl-wallet-jodc/src/components/DepositDialog.js",[],"/Users/453543/spl-wallet-jodc/src/utils/region.ts",[],"/Users/453543/spl-wallet-jodc/src/components/AddTokenDialog.js",[],"/Users/453543/spl-wallet-jodc/src/components/TokenInfoDialog.js",[],"/Users/453543/spl-wallet-jodc/src/components/FtxPay/FtxPayDialog.js",[],"/Users/453543/spl-wallet-jodc/src/utils/swap/eth.js",[],"/Users/453543/spl-wallet-jodc/src/components/CopyableDisplay.js",[],"/Users/453543/spl-wallet-jodc/src/components/EthFeeEstimate.tsx",[],"/Users/453543/spl-wallet-jodc/src/components/IslamicIcon.js",[],"/Users/453543/spl-wallet-jodc/src/pages/Dashboard.js",[],"/Users/453543/spl-wallet-jodc/src/pages/Invest.js",[],"/Users/453543/spl-wallet-jodc/src/utils/wallet.js",["341","342"],"import React, { useContext, useEffect, useMemo, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom'\n\nimport * as bs58 from 'bs58';\nimport { Account, PublicKey } from '@solana/web3.js';\nimport nacl from 'tweetnacl';\nimport {\n  setInitialAccountInfo,\n  useAccountInfo,\n  useConnection,\n} from './connection';\nimport {\n  closeTokenAccount,\n  createAndInitializeTokenAccount,\n  createAssociatedTokenAccount,\n  getOwnedTokenAccounts,\n  nativeTransfer,\n  transferTokens,\n} from './tokens';\nimport { TOKEN_PROGRAM_ID } from './tokens/instructions';\nimport {\n  ACCOUNT_LAYOUT,\n  parseMintData,\n  parseTokenAccountData,\n} from './tokens/data';\nimport { useListener, useLocalStorageState, useRefEqual } from './utils';\nimport { useTokenInfo } from './tokens/names';\nimport { refreshCache, useAsyncData } from './fetch-loop';\nimport { useUnlockedMnemonicAndSeed, walletSeedChanged } from './wallet-seed';\nimport { WalletProviderFactory } from './walletProvider/factory';\nimport { getAccountFromSeed } from './walletProvider/localStorage';\nimport { useSnackbar } from 'notistack';\n\nconst DEFAULT_WALLET_SELECTOR = {\n  walletIndex: 0,\n  importedPubkey: undefined,\n  ledger: false,\n};\n\nexport class Wallet {\n  constructor(connection, type, args) {\n    this.connection = connection;\n    this.type = type;\n    this.provider = WalletProviderFactory.getProvider(type, args);\n  }\n\n  static create = async (connection, type, args) => {\n    const instance = new Wallet(connection, type, args);\n    await instance.provider.init();\n    return instance;\n  };\n\n  get publicKey() {\n    return this.provider.publicKey;\n  }\n\n  get allowsExport() {\n    return this.type === 'local';\n  }\n\n  getTokenAccountInfo = async () => {\n    let accounts = await getOwnedTokenAccounts(this.connection, this.publicKey);\n    return accounts\n      .map(({ publicKey, accountInfo }) => {\n        setInitialAccountInfo(this.connection, publicKey, accountInfo);\n        return { publicKey, parsed: parseTokenAccountData(accountInfo.data) };\n      })\n      .sort((account1, account2) =>\n        account1.parsed.mint\n          .toBase58()\n          .localeCompare(account2.parsed.mint.toBase58()),\n      );\n  };\n\n  createTokenAccount = async (tokenAddress) => {\n    return await createAndInitializeTokenAccount({\n      connection: this.connection,\n      payer: this,\n      mintPublicKey: tokenAddress,\n      newAccount: new Account(),\n    });\n  };\n\n  createAssociatedTokenAccount = async (splTokenMintAddress) => {\n    return await createAssociatedTokenAccount({\n      connection: this.connection,\n      wallet: this,\n      splTokenMintAddress,\n    });\n  };\n\n  tokenAccountCost = async () => {\n    return this.connection.getMinimumBalanceForRentExemption(\n      ACCOUNT_LAYOUT.span,\n    );\n  };\n\n  transferToken = async (\n    source,\n    destination,\n    amount,\n    mint,\n    decimals,\n    memo = null,\n    overrideDestinationCheck = false,\n  ) => {\n    if (source.equals(this.publicKey)) {\n      if (memo) {\n        throw new Error('Memo not implemented');\n      }\n      return this.transferSol(destination, amount);\n    }\n    return await transferTokens({\n      connection: this.connection,\n      owner: this,\n      sourcePublicKey: source,\n      destinationPublicKey: destination,\n      amount,\n      memo,\n      mint,\n      decimals,\n      overrideDestinationCheck,\n    });\n  };\n\n  transferSol = async (destination, amount) => {\n    return nativeTransfer(this.connection, this, destination, amount);\n  };\n\n  closeTokenAccount = async (publicKey, skipPreflight = false) => {\n    return await closeTokenAccount({\n      connection: this.connection,\n      owner: this,\n      sourcePublicKey: publicKey,\n      skipPreflight,\n    });\n  };\n\n  signTransaction = async (transaction) => {\n    return this.provider.signTransaction(transaction);\n  };\n\n  createSignature = async (message) => {\n    return this.provider.createSignature(message);\n  };\n}\n\nconst WalletContext = React.createContext(null);\n\nexport function WalletProvider({ children }) {\n  useListener(walletSeedChanged, 'change');\n  const [{\n    mnemonic,\n    seed,\n    importsEncryptionKey,\n    derivationPath,\n  }] = useUnlockedMnemonicAndSeed();\n  const { enqueueSnackbar } = useSnackbar();\n  const connection = useConnection();\n  const [wallet, setWallet] = useState();\n \n  // `privateKeyImports` are accounts imported *in addition* to HD wallets\n  const [privateKeyImports, setPrivateKeyImports] = useLocalStorageState(\n    'walletPrivateKeyImports',\n    {},\n  );\n  // `walletSelector` identifies which wallet to use.\n  let [walletSelector, setWalletSelector] = useLocalStorageState(\n    'walletSelector',\n    DEFAULT_WALLET_SELECTOR,\n  );\n  const [_hardwareWalletAccount, setHardwareWalletAccount] = useState(null);\n\n  // `walletCount` is the number of HD wallets.\n  const [walletCount, setWalletCount] = useLocalStorageState('walletCount', 1);\n\n  if (walletSelector.ledger && !_hardwareWalletAccount) {\n    walletSelector = DEFAULT_WALLET_SELECTOR;\n    setWalletSelector(DEFAULT_WALLET_SELECTOR);\n  }\n\n  useEffect(() => {\n    (async () => {\n      if (!seed) {\n        return null;\n      }\n      let wallet;\n      if (walletSelector.ledger) {\n        try {\n          const onDisconnect = () => {\n            setWalletSelector(DEFAULT_WALLET_SELECTOR);\n            setHardwareWalletAccount(null);\n          };\n          const args = {\n            onDisconnect,\n            derivationPath: walletSelector.derivationPath,\n            account: walletSelector.account,\n            change: walletSelector.change,\n          };\n          wallet = await Wallet.create(connection, 'ledger', args);\n        } catch (e) {\n          console.log(`received error using ledger wallet: ${e}`);\n          let message = 'Received error unlocking ledger';\n          if (e.statusCode) {\n            message += `: ${e.statusCode}`;\n          }\n          enqueueSnackbar(message, { variant: 'error' });\n          setWalletSelector(DEFAULT_WALLET_SELECTOR);\n          setHardwareWalletAccount(null);\n          return;\n        }\n      }\n      if (!wallet) {\n        const account =\n          walletSelector.walletIndex !== undefined\n            ? getAccountFromSeed(\n                Buffer.from(seed, 'hex'),\n                walletSelector.walletIndex,\n                derivationPath,\n              )\n            : new Account(\n                (() => {\n                  const { nonce, ciphertext } = privateKeyImports[\n                    walletSelector.importedPubkey\n                  ];\n                  return nacl.secretbox.open(\n                    bs58.decode(ciphertext),\n                    bs58.decode(nonce),\n                    importsEncryptionKey,\n                  );\n                })(),\n              );\n        wallet = await Wallet.create(connection, 'local', { account });\n      }\n      setWallet(wallet);\n    })();\n  }, [\n    connection,\n    seed,\n    walletSelector,\n    privateKeyImports,\n    importsEncryptionKey,\n    setWalletSelector,\n    enqueueSnackbar,\n    derivationPath,\n  ]);\n  function addAccount({ name, importedAccount, ledger }) {\n    if (importedAccount === undefined) {\n      name && localStorage.setItem(`name${walletCount}`, name);\n      setWalletCount(walletCount + 1);\n    } else {\n      const nonce = nacl.randomBytes(nacl.secretbox.nonceLength);\n      const plaintext = importedAccount.secretKey;\n      const ciphertext = nacl.secretbox(plaintext, nonce, importsEncryptionKey);\n      // `useLocalStorageState` requires a new object.\n      let newPrivateKeyImports = { ...privateKeyImports };\n      newPrivateKeyImports[importedAccount.publicKey.toString()] = {\n        name,\n        ciphertext: bs58.encode(ciphertext),\n        nonce: bs58.encode(nonce),\n      };\n      setPrivateKeyImports(newPrivateKeyImports);\n    }\n  }\n\n  const getWalletNames = () => {\n    return JSON.stringify(\n      [...Array(walletCount).keys()].map((idx) =>\n        localStorage.getItem(`name${idx}`),\n      ),\n    );\n  };\n  const [walletNames, setWalletNames] = useState(getWalletNames());\n  function setAccountName(selector, newName) {\n    if (selector.importedPubkey && !selector.ledger) {\n      let newPrivateKeyImports = { ...privateKeyImports };\n      newPrivateKeyImports[selector.importedPubkey.toString()].name = newName;\n      setPrivateKeyImports(newPrivateKeyImports);\n    } else {\n      localStorage.setItem(`name${selector.walletIndex}`, newName);\n      setWalletNames(getWalletNames());\n    }\n  }\n\n  const [accounts, derivedAccounts] = useMemo(() => {\n    if (!seed) {\n      return [[], []];\n    }\n\n    const seedBuffer = Buffer.from(seed, 'hex');\n    const derivedAccounts = [...Array(walletCount).keys()].map((idx) => {\n      let address = getAccountFromSeed(seedBuffer, idx, derivationPath)\n        .publicKey;\n      let name = localStorage.getItem(`name${idx}`);\n      return {\n        selector: {\n          walletIndex: idx,\n          importedPubkey: undefined,\n          ledger: false,\n        },\n        isSelected: walletSelector.walletIndex === idx,\n        address,\n        name: idx === 0 ? 'Main account' : name || `Account ${idx}`,\n      };\n    });\n\n    const importedAccounts = Object.keys(privateKeyImports).map((pubkey) => {\n      const { name } = privateKeyImports[pubkey];\n      return {\n        selector: {\n          walletIndex: undefined,\n          importedPubkey: pubkey,\n          ledger: false,\n        },\n        address: new PublicKey(bs58.decode(pubkey)),\n        name: `${name} (imported)`, // TODO: do this in the Component with styling.\n        isSelected: walletSelector.importedPubkey === pubkey,\n      };\n    });\n\n    const accounts = derivedAccounts.concat(importedAccounts);\n    return [accounts, derivedAccounts];\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [seed, walletCount, walletSelector, privateKeyImports, walletNames]);\n\n  let hardwareWalletAccount;\n  if (_hardwareWalletAccount) {\n    hardwareWalletAccount = {\n      ..._hardwareWalletAccount,\n      selector: {\n        walletIndex: undefined,\n        ledger: true,\n        importedPubkey: _hardwareWalletAccount.publicKey,\n        derivationPath: _hardwareWalletAccount.derivationPath,\n        account: _hardwareWalletAccount.account,\n        change: _hardwareWalletAccount.change,\n      },\n      address: _hardwareWalletAccount.publicKey,\n      isSelected: walletSelector.ledger,\n    };\n  }\n\n  return (\n    <WalletContext.Provider\n      value={{\n        wallet,\n        seed,\n        mnemonic,\n        importsEncryptionKey,\n        walletSelector,\n        setWalletSelector,\n        privateKeyImports,\n        setPrivateKeyImports,\n        accounts,\n        derivedAccounts,\n        addAccount,\n        setAccountName,\n        derivationPath,\n        hardwareWalletAccount,\n        setHardwareWalletAccount,\n      }}\n    >\n      {children}\n    </WalletContext.Provider>\n  );\n}\n\nexport function useWallet() {\n  return useContext(WalletContext).wallet;\n}\n\nexport function useWalletPublicKeys() {\n  let wallet = useWallet();\n  let [tokenAccountInfo, loaded] = useAsyncData(\n    wallet.getTokenAccountInfo,\n    wallet.getTokenAccountInfo,\n  );\n  let publicKeys = [\n    wallet.publicKey,\n    ...(tokenAccountInfo\n      ? tokenAccountInfo.map(({ publicKey }) => publicKey)\n      : []),\n  ];\n  // Prevent users from re-rendering unless the list of public keys actually changes\n  publicKeys = useRefEqual(\n    publicKeys,\n    (oldKeys, newKeys) =>\n      oldKeys.length === newKeys.length &&\n      oldKeys.every((key, i) => key.equals(newKeys[i])),\n  );\n  return [publicKeys, loaded];\n}\n\nexport function useWalletTokenAccounts() {\n  let wallet = useWallet();\n  return useAsyncData(wallet.getTokenAccountInfo, wallet.getTokenAccountInfo);\n}\n\nexport function refreshWalletPublicKeys(wallet) {\n  refreshCache(wallet.getTokenAccountInfo);\n}\n\nexport function useWalletAddressForMint(mint) {\n  const [walletAccounts] = useWalletTokenAccounts();\n  return useMemo(\n    () =>\n      mint\n        ? walletAccounts\n            ?.find((account) => account.parsed?.mint?.equals(mint))\n            ?.publicKey.toBase58()\n        : null,\n    [walletAccounts, mint],\n  );\n}\n\nexport function useBalanceInfo(publicKey) {\n  let [accountInfo, accountInfoLoaded] = useAccountInfo(publicKey);\n  let { mint, owner, amount } = accountInfo?.owner.equals(TOKEN_PROGRAM_ID)\n    ? parseTokenAccountData(accountInfo.data)\n    : {};\n  let [mintInfo, mintInfoLoaded] = useAccountInfo(mint);\n  let { name, symbol, logoUri } = useTokenInfo(mint);\n\n  if (!accountInfoLoaded) {\n    return null;\n  }\n\n  if (mint && mintInfoLoaded) {\n    try {\n      let { decimals } = parseMintData(mintInfo.data);\n      return {\n        amount,\n        decimals,\n        mint,\n        owner,\n        tokenName: name,\n        tokenSymbol: symbol,\n        tokenLogoUri: logoUri,\n        valid: true,\n      };\n    } catch (e) {\n      return {\n        amount,\n        decimals: 0,\n        mint,\n        owner,\n        tokenName: 'Invalid',\n        tokenSymbol: 'INVALID',\n        tokenLogoUri: null,\n        valid: false,\n      };\n    }\n  }\n\n  if (!mint) {\n    return {\n      amount: accountInfo?.lamports ?? 0,\n      decimals: 9,\n      mint: null,\n      owner: publicKey,\n      tokenName: 'SOL',\n      tokenSymbol: 'SOL',\n      valid: true,\n    };\n  }\n\n  return null;\n}\n\nexport function useWalletSelector() {\n  const {\n    accounts,\n    derivedAccounts,\n    addAccount,\n    setWalletSelector,\n    setAccountName,\n    hardwareWalletAccount,\n    setHardwareWalletAccount,\n  } = useContext(WalletContext);\n\n  return {\n    accounts,\n    derivedAccounts,\n    setWalletSelector,\n    addAccount,\n    setAccountName,\n    hardwareWalletAccount,\n    setHardwareWalletAccount,\n  };\n}\n","/Users/453543/spl-wallet-jodc/src/pages/Borrow.js",["343"],"import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport BalancesList from '../components/BalancesList';\nimport Grid from '@material-ui/core/Grid';\nimport { useIsProdNetwork } from '../utils/connection';\nimport DebugButtons from '../components/DebugButtons';\nimport { makeStyles } from '@material-ui/core';\nimport { useIsExtensionWidth } from '../utils/utils';\nimport Dashboard from './Dashboard';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    [theme.breakpoints.down(theme.ext)]: {\n      padding: 0,\n    },\n    [theme.breakpoints.up(theme.ext)]: {\n      maxWidth: 'md',\n    },\n  },\n  balancesContainer: {\n    [theme.breakpoints.down(theme.ext)]: {\n      marginBottom: 24,\n    },\n  },\n}));\n\nexport default function Borrow() {\n  const classes = useStyles();\n  const isProdNetwork = useIsProdNetwork();\n  const isExtensionWidth = useIsExtensionWidth();\n  return (\n    <Container fixed maxWidth=\"md\" className={classes.container}>\n      <Grid container spacing={isExtensionWidth ? 0 : 3}>\n        <Grid item xs={12} className={classes.balancesContainer}>\n          <BalancesList />\n        </Grid>\n        {isProdNetwork ? null : (\n          <Grid item xs={12}>\n            <DebugButtons />\n          </Grid>\n        )}\n      </Grid>\n   \n    </Container>\n  );\n}\n","/Users/453543/spl-wallet-jodc/src/pages/Deposits.js",[],"/Users/453543/spl-wallet-jodc/src/pages/Orders.js",[],"/Users/453543/spl-wallet-jodc/src/pages/Chart.js",[],"/Users/453543/spl-wallet-jodc/src/pages/Title.js",[],"/Users/453543/spl-wallet-jodc/src/pages/listItems.js",[],{"ruleId":"344","replacedBy":"345"},{"ruleId":"346","replacedBy":"347"},{"ruleId":"348","severity":1,"message":"349","line":9,"column":8,"nodeType":"350","messageId":"351","endLine":9,"endColumn":12},{"ruleId":"348","severity":1,"message":"352","line":66,"column":24,"nodeType":"350","messageId":"351","endLine":66,"endColumn":34},{"ruleId":"353","severity":1,"message":"354","line":193,"column":20,"nodeType":"355","endLine":195,"endColumn":17},{"ruleId":"356","severity":1,"message":"357","line":195,"column":17,"nodeType":"358","endLine":198,"endColumn":19},{"ruleId":"356","severity":1,"message":"357","line":225,"column":17,"nodeType":"358","endLine":228,"endColumn":19},{"ruleId":"353","severity":1,"message":"354","line":229,"column":21,"nodeType":"355","endLine":231,"endColumn":15},{"ruleId":"348","severity":1,"message":"359","line":2,"column":10,"nodeType":"350","messageId":"351","endLine":2,"endColumn":20},{"ruleId":"348","severity":1,"message":"360","line":2,"column":22,"nodeType":"350","messageId":"351","endLine":2,"endColumn":33},{"ruleId":"348","severity":1,"message":"361","line":9,"column":9,"nodeType":"350","messageId":"351","endLine":9,"endColumn":17},{"ruleId":"348","severity":1,"message":"362","line":24,"column":8,"nodeType":"350","messageId":"351","endLine":24,"endColumn":16},{"ruleId":"348","severity":1,"message":"363","line":47,"column":8,"nodeType":"350","messageId":"351","endLine":47,"endColumn":17},{"ruleId":"348","severity":1,"message":"364","line":48,"column":8,"nodeType":"350","messageId":"351","endLine":48,"endColumn":16},{"ruleId":"348","severity":1,"message":"365","line":50,"column":10,"nodeType":"350","messageId":"351","endLine":50,"endColumn":34},{"ruleId":"348","severity":1,"message":"366","line":50,"column":36,"nodeType":"350","messageId":"351","endLine":50,"endColumn":51},{"ruleId":"348","severity":1,"message":"367","line":55,"column":8,"nodeType":"350","messageId":"351","endLine":55,"endColumn":15},{"ruleId":"348","severity":1,"message":"368","line":55,"column":19,"nodeType":"350","messageId":"351","endLine":55,"endColumn":31},{"ruleId":"348","severity":1,"message":"369","line":56,"column":8,"nodeType":"350","messageId":"351","endLine":56,"endColumn":19},{"ruleId":"370","severity":1,"message":"371","line":117,"column":3,"nodeType":"372","messageId":"373","endLine":117,"endColumn":10},{"ruleId":"348","severity":1,"message":"360","line":2,"column":22,"nodeType":"350","messageId":"351","endLine":2,"endColumn":33},{"ruleId":"348","severity":1,"message":"374","line":9,"column":8,"nodeType":"350","messageId":"351","endLine":9,"endColumn":17},{"ruleId":"348","severity":1,"message":"375","line":10,"column":8,"nodeType":"350","messageId":"351","endLine":10,"endColumn":12},{"ruleId":"348","severity":1,"message":"376","line":11,"column":8,"nodeType":"350","messageId":"351","endLine":11,"endColumn":19},{"ruleId":"348","severity":1,"message":"377","line":12,"column":8,"nodeType":"350","messageId":"351","endLine":12,"endColumn":19},{"ruleId":"348","severity":1,"message":"378","line":13,"column":8,"nodeType":"350","messageId":"351","endLine":13,"endColumn":14},{"ruleId":"348","severity":1,"message":"379","line":14,"column":8,"nodeType":"350","messageId":"351","endLine":14,"endColumn":18},{"ruleId":"344","replacedBy":"345"},{"ruleId":"346","replacedBy":"347"},{"ruleId":"348","severity":1,"message":"380","line":20,"column":8,"nodeType":"350","messageId":"351","endLine":20,"endColumn":18},{"ruleId":"348","severity":1,"message":"381","line":21,"column":8,"nodeType":"350","messageId":"351","endLine":21,"endColumn":18},{"ruleId":"348","severity":1,"message":"382","line":392,"column":16,"nodeType":"350","messageId":"351","endLine":392,"endColumn":23},{"ruleId":"348","severity":1,"message":"359","line":2,"column":10,"nodeType":"350","messageId":"351","endLine":2,"endColumn":20},{"ruleId":"348","severity":1,"message":"360","line":2,"column":22,"nodeType":"350","messageId":"351","endLine":2,"endColumn":33},{"ruleId":"348","severity":1,"message":"374","line":9,"column":8,"nodeType":"350","messageId":"351","endLine":9,"endColumn":17},"no-native-reassign",["383"],"no-negated-in-lhs",["384"],"no-unused-vars","'blue' is defined but never used.","Identifier","unusedVar","'appElement' is assigned a value but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useHistory' is defined but never used.","'useLocation' is defined but never used.","'CLUSTERS' is defined but never used.","'CodeIcon' is defined but never used.","'InboxIcon' is defined but never used.","'MailIcon' is defined but never used.","'AddCircleOutlineOutlined' is defined but never used.","'SubjectOutlined' is defined but never used.","'SvgIcon' is defined but never used.","'SvgIconProps' is defined but never used.","'IslamicIcon' is defined but never used.","no-dupe-keys","Duplicate key 'content'.","ObjectExpression","unexpected","'Dashboard' is defined but never used.","'Card' is defined but never used.","'CardActions' is defined but never used.","'CardContent' is defined but never used.","'Button' is defined but never used.","'Typography' is defined but never used.","'ExpandLess' is defined but never used.","'ExpandMore' is defined but never used.","'setOpen' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]